{"version":3,"sources":["config_example.js","hash.js","PiChart.js","GraphScreen.js","serviceWorker.js","index.js","App.js","logo.svg"],"names":["authEndpoint","clientId","redirectUri","scopes","hash","window","location","substring","split","reduce","initial","item","parts","decodeURIComponent","PiChart","_ref","chartData","artistToGenres","react_default","a","createElement","className","dist","data","options","plugins","title","display","text","color","legend","position","labels","font","size","tooltip","callbacks","label","context","initialLabel","artists","map","artist","genresArr","includes","push","artistName","length","GraphScreen","token","_useState","useState","_useState2","Object","slicedToArray","setArtistToGenres","_useState3","_useState4","setDataObj","axios","require","_useState5","_useState6","piData","setPiData","_useState7","_useState8","isMounted","setIsMounted","indexOfMax","arr","max","maxIndex","i","useEffect","topArtists","_ref2","asyncToGenerator","regenerator_default","mark","_callee","_ref3","headers","currArtistsToGenres","unorganizedGenres","allGenres","frequency","keys","vals","finalArr","currIndex","finalObj","sum","currPiData","wrap","_context","prev","next","Authorization","get","then","response","items","index","name","images","url","genres","console","log","concat","apply","toConsumableArray","genre","values","splice","partialSum","datasets","value","Math","round","backgroundColor","borderColor","radius","stop","_x","this","arguments","getTopArtists","currCSS","Boolean","hostname","match","ReactDOM","render","setToken","_useState9","_useState10","mToken","access_token","href","join","GraphScreen_GraphScreen","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.8cfc267f.chunk.js","sourcesContent":["export const authEndpoint = \"https://accounts.spotify.com/authorize\";\n\n// Replace with your app's client ID, redirect URI and desired scopes\nexport const clientId = \"e06a8e4468034056a35e699e61e7b0cb\";\n//export const redirectUri = \"https://huangdarren1106.github.io\";\nexport const redirectUri = \"http://localhost:3000/redirect\";\nexport const scopes = [\n    \"user-top-read\",\n    \"user-read-currently-playing\",\n    \"user-read-playback-state\",\n];\n","// Get the hash of the url\nconst hash = window.location.hash\n  .substring(1)\n  .split(\"&\")\n  .reduce(function(initial, item) {\n    if (item) {\n      var parts = item.split(\"=\");\n      initial[parts[0]] = decodeURIComponent(parts[1]);\n    }\n    return initial;\n  }, {});\nwindow.location.hash = \"\";\n\nexport default hash;\n","import 'chart.js/auto';\nimport './GraphScreen.css'\nimport { Pie } from \"react-chartjs-2\";\n\nimport React, { useState, useEffect } from \"react\";\n\nexport default function PiChart({ chartData, artistToGenres }) {\n    return (\n        <div className='PiChart'>\n            <Pie\n                data={chartData}\n                options={{\n                    \n                    plugins: {\n                        title: {\n                            display: true,\n                            text: \"Your Top Genres\",\n                            color: \"#000000\"\n                        },\n                        legend: {\n                            display: true,\n                            position: \"bottom\",\n                            labels: {\n                                color: \"#000000\",\n                                font: {\n                                    size: 16\n\n                                }\n                            }\n\n                        },\n                        tooltip: {\n                            callbacks: {\n                                label: function (context) {\n                                    var initialLabel = context.label + \": \";\n                                    var artists = [];\n                                    artistToGenres.map((artist) => {\n                                        if (artist.genresArr.includes(context.label)) {\n                                            artists.push(artist.artistName);\n                                        }\n                                    })\n                                    artists.map((artist) => {\n                                        initialLabel = initialLabel + artist + \", \"\n                                    });\n                                    initialLabel = initialLabel.substring(0, initialLabel.length - 2);\n                                    return initialLabel;\n\n                                }\n                            }\n                        }\n                    }\n                }}\n            />\n        </div>\n    );\n};\n","import { pid } from \"process\";\nimport React, { useState, useEffect } from \"react\";\nimport PiChart from './PiChart.js'\nimport './GraphScreen.css'\nexport default function GraphScreen({ token }) {\n\n\n\n    //const [topArtists, setTopArtists] = useState([]);\n    const [artistToGenres, setArtistToGenres] = useState([]);\n    const [dataObj, setDataObj] = useState({});\n    const axios = require(\"axios\");\n    const cheerio = require(\"cheerio\");\n    const pretty = require(\"pretty\");\n    const fs = require(\"fs\");\n    const [piData, setPiData] = useState({})\n    const [isMounted, setIsMounted] = useState(false);\n\n    const indexOfMax = (arr) => {\n        if (arr.length === 0) {\n            return -1;\n        }\n\n        var max = arr[0];\n        var maxIndex = 0;\n\n        for (var i = 1; i < arr.length; i++) {\n            if (arr[i] > max) {\n                maxIndex = i;\n                max = arr[i];\n            }\n        }\n\n        return maxIndex;\n    }\n    useEffect(() => {\n        var topArtists = [];\n        const getTopArtists = async (token) => {\n            const headers = {\n                \"Authorization\": \"Bearer \" + token\n            };\n            await axios.get(\"https://api.spotify.com/v1/me/top/artists\", { headers }).then((response) => {\n                //setTopArtists(response.data.items);\n                topArtists = response.data.items;\n                //setTopArtistsActivated(true);\n\n            })\n            const currArtistsToGenres = topArtists.map((artist, index) => {\n                const artistName = artist.name;\n                const imageURL = artist.images[0].url;\n                const genresArr = artist.genres;\n                return {\n                    artistName: artistName,\n                    genresArr: genresArr\n                }\n            })\n            console.log(currArtistsToGenres)\n            setArtistToGenres(currArtistsToGenres);\n            const unorganizedGenres = topArtists.map((artist, index) => {\n                const genreArr = artist.genres;\n                return genreArr;\n            })\n            const allGenres = [].concat(...unorganizedGenres)\n            //sort frequency\n            var frequency = {};\n            allGenres.map((genre) => {\n                frequency[genre] = 0;\n            })\n            allGenres.map((genre) => {\n                frequency[genre] = frequency[genre] + 1;\n            })\n            var keys = Object.keys(frequency);\n            var vals = Object.values(frequency);\n            var a = 0;\n            var finalArr = [];\n            while (a != 20 && keys.length != 0) {\n                var currIndex = indexOfMax(vals);\n                finalArr.push(keys[currIndex]);\n                keys.splice(currIndex, 1);\n                vals.splice(currIndex, 1);\n                a++;\n            }\n            var finalObj = {};\n            finalArr.map((genre) => {\n                finalObj[genre] = frequency[genre];\n            })\n            setDataObj(finalObj)\n            const sum = Object.values(finalObj).reduce((partialSum, a) => partialSum + a, 0);\n            var currPiData = {\n                labels: Object.keys(finalObj),\n                datasets: [\n                    {\n                        label: \"Your Top Genres\",\n                        data: Object.values(finalObj).map((value) => {\n                            return Math.round((value / sum) * 100) / 100;\n                            //return num + \"%\"\n                        }),\n                        backgroundColor: ['#e6194b', '#3cb44b', '#ffe119', '#4363d8', '#f58231', '#911eb4', '#46f0f0', '#f032e6', '#bcf60c', '#fabebe', '#008080', '#e6beff', '#9a6324', '#fffac8', '#800000', '#aaffc3', '#808000', '#ffd8b1', '#000075', '#808080'],\n                        borderColor: \"white\",\n                        radius: \"100%\"\n                    }\n                ]\n            }\n            setPiData(currPiData);\n            setIsMounted(true);\n        }\n        getTopArtists(token);\n    }, [])\n\n\n    if (!isMounted)\n        return (\n            <div className=\"GraphScreen\">\n\n                loading\n\n\n            </div>\n        )\n    return (\n        <body className=\"GraphScreen\">\n            <div className=\"PiWrapper\">\n                <PiChart chartData={piData} artistToGenres={artistToGenres} />\n            </div>\n            <table className=\"TablePi\">\n                {artistToGenres.map((artist, index) => {\n                    const name = artist.artistName;\n                    var currCSS = \"thArtist\" + index\n                    console.log(index)\n                    return (\n                        <tr className={currCSS}>\n                            <th>{name}</th>\n                        </tr>\n                    );\n                })}\n            </table>\n        </body>\n    );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport { authEndpoint, clientId, redirectUri, scopes } from \"./config_example\";\nimport hash from \"./hash\";\nimport Player from \"./Player\";\nimport TenTracks from \"./TenTracks\"\nimport GraphScreen from \"./GraphScreen\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nexport default function App() {\n  const [token, setToken] = useState(null);\n  const [topTracks, setTopTracks] = useState([]);\n  const [topTracksActivated, setTopTracksActivated] = useState(false);\n  const [topArtists, setTopArtists] = useState([]);\n  const [topArtistsActivated, setTopArtistsActivated] = useState(false);\n\n  const getTopTracks = (token) => {\n    /*\n    const headers = {\n      \"Authorization\": \"Bearer \" + token\n  };\n    axios.get(\"https://api.spotify.com/v1/me/top/tracks\", {headers}).then((response) => {\n      console.log(response.data);\n      setTopTracks(response.data.items);\n      setTopTracksActivated(true);\n    })\n    */\n    setTopTracksActivated(true)\n  }\n\n\n\n  useEffect(() => {\n    var mToken = hash.access_token;\n    if (mToken) {\n      setToken(mToken);\n    }\n\n  })\n  return (\n    <div>\n      \n      <body className=\"App-body\">\n        {!token && (\n          <a\n            className=\"btn btn--loginApp-link\"\n            href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\n              \"%20\"\n            )}&response_type=token&show_dialog=true`}\n          >\n            Login to Spotify\n          </a>\n        )}\n        {token && (\n          <GraphScreen token={token} />\n        )}\n      </body>\n    </div>\n  );\n\n}\n\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}